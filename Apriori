package com.cg.demo;


import java.util.ArrayList;

public class Apriori {
  private static Apriori apriori;
  private ArrayList<int[]> baskets = new ArrayList<int[]>();
  private int mMinSup = 2;

  /**
   * @param args
   */
  public static void main(String[] args) {
    apriori = new Apriori();
    apriori.initializeValues();
    apriori.executeApriori();
  }
  
  private void initializeValues() {
	int[] item0 = {1};
    int[] item1 = {1, 3, 4};
    int[] item2 = {2, 3, 5};
    int[] item3 = {1, 2, 3, 5};
    int[] item4 = {2, 5};
    baskets.add(item0);
    baskets.add(item1);
    baskets.add(item2);
    baskets.add(item3);
    baskets.add(item4);
    System.out.println("Given Min thresholds :"+mMinSup);
    printArray(baskets);
  }
  
  public void executeApriori() {
    ArrayList<ItemList> first = generateCandidateFromTransaction();
    System.out.println("First Level");
    printItemList(first);
    while(true) {
    	
      ArrayList<ItemList> second = generateCandidateFromList(first);
      ArrayList<ItemList> second_2 = generateNextListFromCandidate(second);
      
      
      if (second_2.size() <= 1) {
        System.out.println("done");
        break;
      }else{
    	  System.out.println("Next Level"); 
    	  printItemList(second_2);
      }
      first = second_2;
     
    }
  }
  
  public class ItemList {
    private int mCount;
    private int[] mItems;
    private int mSup = 2;
    
    public ItemList() {
    }
    
    public ItemList(int c, int[] i, int s) {
      mCount = c;
      mItems = i;
      mSup = s;
    }
    public int getSupport() {
      return mSup;
    }
    public int[] getItems() {
      return mItems;
    }
    public int getItem(int index) {
      return mItems[index];
    }
    public int getCount() {
      return mCount;
    }
    public boolean isAlreadyExist(ArrayList<ItemList> items) {
      boolean res = false;
      for (int i = 0; i < items.size(); i++) {
        if (Apriori.apriori.contain(items.get(i).getItems(), this.getItems())) {
          return true;
        }
      }
      return res;
    }
    
   
  }
  
  private int countAppearance(ArrayList<int[]> set, int[] target) {
    int ret = 0;
    for (int i = 0; i < set.size(); i++) {
      if (contain(set.get(i), target)) {
        ret++;
      }
    }
    return ret;
  }
  
  private boolean contain(int[] source, int[] find) {
    boolean ret = false;
    int match = 0;
    for (int i = 0; i < find.length; i++) {
      for (int j = 0; j < source.length; j++) {
        if (source[j] == find[i]) {
          match++;
        }
      }
    }
    if(match == find.length) {
      ret = true;
    }
    return ret;
  }
  
  private ArrayList<ItemList> generateCandidateFromTransaction() {
    ArrayList<ItemList> ret = new ArrayList<ItemList>();
    ArrayList<Integer> items = new ArrayList<Integer>();
    for (int i = 0; i < baskets.size(); i++) {
      int[] temp_items = baskets.get(i);
      for (int j = 0; j < temp_items.length; j++) {
        Integer data = new Integer(temp_items[j]);
        if (!items.contains(data)) {
          items.add(data);
        }
      }
    }
    for (int ii = 0; ii < items.size(); ii++) {
      int[] temp = {items.get(ii)};
      ret.add(new ItemList(1, temp, countAppearance(baskets, temp)));
    }
    return ret;
  }
  
  private ArrayList<ItemList> generateCandidateFromList(ArrayList<ItemList> list) {
    ArrayList<ItemList> candidate = new ArrayList<ItemList>();
    for (int i = 0; i < list.size(); i++) {
      if (list.get(i).getSupport() >= mMinSup) {
        if (!list.get(i).isAlreadyExist(candidate)) {
          candidate.add(list.get(i));
        }
      }
    }
    return candidate;
  }
  
  private ArrayList<ItemList> generateNextListFromCandidate(ArrayList<ItemList> candidate) {
    ArrayList<ItemList> list = new ArrayList<ItemList>();
    for (int i = 0; i < candidate.size(); i++) {
      for (int j = i; j < candidate.size(); j++) {
        if (distance(candidate.get(i), candidate.get(j)) == 1) {
          int[] items = pickItems(candidate.get(i), candidate.get(j));
          ItemList temp = new ItemList(candidate.get(0).getCount() + 1, items, countAppearance(baskets, items));
          list.add(temp);
        }
      }
    }
    return list;
  }
  
  private int distance(ItemList one, ItemList another) {
    int ret = one.getCount();
    for (int i = 0; i < one.getCount(); i++) {
      for (int j = 0; j < another.getCount(); j++) {
        if (one.getItem(i) == another.getItem(j)) {
          ret--;
        }
      }
    }
    return ret;
  }
  
  private int[] pickItems(ItemList one, ItemList another) {
    int[] ret = new int[one.getCount() + 1];
    int i = 0;
    int j = 0;
    int index = 0;
  
    while((i < one.getCount()) || (j < another.getCount())) {
      if (one.getCount() == i) {
      
        ret[index++] = another.getItem(j);
        j++;
      } else if (another.getCount() == j) {
      
        ret[index++] = one.getItem(i);
        i++;
      } else if (one.getItem(i) < another.getItem(j)) {
     
        ret[index++] = one.getItem(i);
        i++;
      } else if (one.getItem(i) > another.getItem(j)) {
      
        ret[index++] = another.getItem(j);
        j++;
      } else {
       
        ret[index++] = one.getItem(i);
        i++;
        j++;
      }
    }
    return ret;
  }
  
  private void printArray(ArrayList<int[]> array) {
	  
	  System.out.println("Input Given List:");
	  
    for (int i = 0; i < array.size(); i++) {
      String out = "";
      int[] buf = array.get(i);
      for (int j = 0; j < buf.length; j++) {
        out += buf[j] + ", ";
      }
      System.out.println(out);
    }
  }

  private void printItemList(ArrayList<ItemList> list) {
    for (int i = 0; i < list.size(); i++) {
      int[] items = list.get(i).getItems();
      System.out.print("ID : " + i + " - basket : ");
      for (int j = 0; j < items.length; j++) {
        System.out.print(items[j] + ", ");
      }
      System.out.println("Count : " + list.get(i).getSupport());
    }
  }

}
